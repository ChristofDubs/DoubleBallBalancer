import matplotlib.pyplot as plt
import numpy as np

# rolling vel, angular z vel, omega_x command offset
# data=np.array([[0.5,-0.006320721579946795,0.05],
# [0.5,-0.013390530522848818,0.1],
# [1.0,-0.05600610552991494,0.1],
# [1.0,-0.02654055509164135,0.05],
# [1.0,-0.013089847253419853,0.025],
# [2.0,-0.018236583088164206,0.025],
# [2.0,-0.03647376815607982,0.05],
# [2.0,-0.07294877626094438,0.1],
# [0.5,-0.0031129173494233685,0.025],
# [0.25,-0.0009238232815874751,0.05],
# [0.25,-0.001905307729960467,0.1],
# [1.5,-0.07359777356473401,0.1],
# [1.5,-0.03667595294307526,0.05],
# [1.5,-0.01832227934728539,0.025]])

# omega_y_cmd, omega_y, omega_z, omega_x_command_offset
data = np.array([[0.1, 0.10012473769033584, -5.7508689640662786e-05, 0.05],
                 [0.1, 0.10050459330803659, -0.00011650577378820611, 0.1],
                 [0.1, 0.10115689623845732, -0.0001786218886819799, 0.15000000000000002],
                 [0.1, 0.10211300310995465, -0.0002457903232259295, 0.2],
                 [0.1, 0.1034225377487889, -0.0003204721197862686, 0.25],
                 [0.1, 0.10516102076030685, -0.0004059907141087715, 0.30000000000000004],
                 [0.1, 0.10744345892360763, -0.0005070571207176415, 0.35000000000000003],
                 [0.1, 0.11044961421122658, -0.0006306177560310823, 0.4],
                 [0.1, 0.11447440664084185, -0.0007871658185453183, 0.45],
                 [0.2, 0.20048700460768587, -0.0004871041880087993, 0.05],
                 [0.2, 0.20198937519377336, -0.0009965791954877144, 0.1],
                 [0.2, 0.20464078016651804, -0.001554716801871596, 0.15000000000000002],
                 [0.2, 0.20870532626106897, -0.0021971324028174062, 0.2],
                 [0.2, 0.2146667735003381, -0.002978228768468611, 0.25],
                 [0.2, 0.22344362001505483, -0.003990443277290501, 0.30000000000000004],
                 [0.2, 0.23697280701933238, -0.0054092630317505025, 0.35000000000000003],
                 [0.2, 0.2601116629981297, -0.007625097693289072, 0.4],
                 [0.2, 0.30849693877074114, -0.011881325851760029, 0.45],
                 [0.4, 0.4024167854981472, -0.003680007203657155, 0.05],
                 [0.4, 0.4101346650236598, -0.00774324537542705, 0.1],
                 [0.4, 0.42487510479110535, -0.012746290778193742, 0.15000000000000002],
                 [0.4, 0.451065329097633, -0.019788407814352663, 0.2],
                 [0.4, 0.5009154050417756, -0.031751181009854565, 0.25],
                 [0.4, 0.6125478790221168, -0.059091385612416995, 0.30000000000000004],
                 [0.4, 0.8930183768009343, -0.15006982263075927, 0.35000000000000003],
                 [0.4, 1.3440535750779645, -0.39178113341662996, 0.4],
                 [0.4, 1.4103193845137283, -0.5008224356643916, 0.45],
                 [0.7, 0.7055742095089427, -0.01298370053972414, 0.05],
                 [0.7, 0.723779760134324, -0.027968647790211673, 0.1],
                 [0.7, 0.7607987638609359, -0.04841146815062915, 0.15000000000000002],
                 [0.7, 0.8350560919126397, -0.0827729803386384, 0.2],
                 [0.7, 0.979355293825873, -0.14925901366076474, 0.25],
                 [0.7, 1.130950852995474, -0.2298782177655489, 0.30000000000000004],
                 [0.7, 1.231149783923535, -0.28343926530852714, 0.35000000000000003],
                 [0.7, 1.3634115904001936, -0.36101146429050257, 0.4],
                 [0.7, 1.4702056355403743, -0.4427942924843521, 0.45],
                 [1.0, 1.0078188690251242, -0.02695218111824815, 0.05],
                 [1.0, 1.0323069997732863, -0.05668640294993301, 0.1],
                 [1.0, 1.0758008985538612, -0.09195545247491368, 0.15000000000000002],
                 [1.0, 1.1381639495407267, -0.13448444162246206, 0.2],
                 [1.0, 1.2149561823597355, -0.1841286758372639, 0.25],
                 [1.0, 1.2965240912654126, -0.23779797648361523, 0.30000000000000004],
                 [1.0, 1.3631248339420026, -0.28403794283146566, 0.35000000000000003],
                 [1.0, 1.4187036871618515, -0.3220546202878938, 0.4],
                 [1.0, 1.480630664701853, -0.36524373312697855, 0.45],
                 [1.2, 1.2072300735340433, -0.034062615083789965, 0.05],
                 [1.2, 1.228576384176964, -0.06938477371205806, 0.1],
                 [1.2, 1.26279972158186, -0.10680833698864982, 0.15000000000000002],
                 [1.2, 1.3070755228266933, -0.1465214349487494, 0.2],
                 [1.2, 1.3583460017042723, -0.18813618712932684, 0.25],
                 [1.2, 1.4143743304835343, -0.23140432914461226, 0.30000000000000004],
                 [1.2, 1.4740633160331917, -0.27729891034191684, 0.35000000000000003],
                 [1.2, 1.5316693609927858, -0.3233571626885686, 0.4],
                 [1.2, 1.5807019407917886, -0.3647711283974342, 0.45],
                 [1.4, 1.405263727851706, -0.036389451599272815, 0.05],
                 [1.4, 1.420590764601562, -0.07308844830442457, 0.1],
                 [1.4, 1.4448236403252992, -0.11042489224783257, 0.15000000000000002],
                 [1.4, 1.4763902068938606, -0.14884666832997218, 0.2],
                 [1.4, 1.513804621910523, -0.18860667868428002, 0.25],
                 [1.4, 1.5553835417591217, -0.22906768068027872, 0.30000000000000004],
                 [1.4, 1.5987077791130548, -0.2693614020317196, 0.35000000000000003],
                 [1.4, 1.64236093208621, -0.30966882840163185, 0.4],
                 [1.4, 1.686472211062406, -0.3507293395048999, 0.45],
                 [1.6, 1.6036187519116152, -0.03667081164489096, 0.05],
                 [1.6, 1.6142588490761796, -0.07349682350753081, 0.1],
                 [1.6, 1.6313589501591625, -0.11061681943528419, 0.15000000000000002],
                 [1.6, 1.6540452030964452, -0.14815004980686639, 0.2],
                 [1.6, 1.6812580079686794, -0.18620722210716303, 0.25],
                 [1.6, 1.7123630054994514, -0.22489473204129296, 0.30000000000000004],
                 [1.6, 1.7467331339133148, -0.26430836889935877, 0.35000000000000003],
                 [1.6, 1.7832619414291675, -0.3045263911340176, 0.4],
                 [1.6, 1.8211041425530958, -0.34557572172194184, 0.45],
                 [1.8, 1.802584012522045, -0.03671873875646712, 0.05],
                 [1.8, 1.8102403316402425, -0.07356222982127929, 0.1],
                 [1.8, 1.8227165024762857, -0.11064724507260199, 0.15000000000000002],
                 [1.8, 1.8396178608549838, -0.14807323928520147, 0.2],
                 [1.8, 1.8603350865393182, -0.1859097571145055, 0.25],
                 [1.8, 1.8843585159563987, -0.22418022964370785, 0.30000000000000004],
                 [1.8, 1.9113303129127377, -0.2628338464371495, 0.35000000000000003],
                 [1.8, 1.9404651755240543, -0.30171637029273773, 0.4],
                 [1.8, 1.970685352061349, -0.34057079385583616, 0.45],
                 [2.0, 2.001886640324722, -0.03647377310176774, 0.05],
                 [2.0, 2.0074822920668103, -0.0729487921175957, 0.1],
                 [2.0, 2.0166061910464474, -0.10940722756092891, 0.15000000000000002],
                 [2.0, 2.028977152415484, -0.1457935897042482, 0.2],
                 [2.0, 2.044143823749814, -0.182002215465425, 0.25],
                 [2.0, 2.061565963380995, -0.21787298495748758, 0.30000000000000004],
                 [2.0, 2.0808114574450465, -0.253180163822499, 0.35000000000000003],
                 [2.0, 2.101405485206281, -0.28763899976448287, 0.4],
                 [2.0, 2.122648855113925, -0.320970285823749, 0.45]])

# generate symmetric data (negative omega_y_cmd / negative omega_x_command_offset)
data = np.row_stack([np.dot(data, np.diag(x))
                     for x in [[1, 1, 1, 1], [1, 1, -1, -1], [-1, -1, -1, 1], [-1, -1, 1, -1]]])


omega_y_cmd = data[:, 0]
omega_y = data[:, 1]
omega_z = data[:, 2]
omega_x_cmd = data[:, 3]

# fit function: omega_x_cmd = f(omega_y, omega_z)
A = np.column_stack([a * b for a in [omega_z, np.abs(omega_z) * omega_z]
                     for b in [1 / omega_y, 1 / (omega_y * np.abs(omega_y))]])
b = omega_x_cmd

x = np.linalg.solve(np.dot(A.T, A), np.dot(A.T, b))

print(x)

fig, ax = plt.subplots(subplot_kw={"projection": "3d"})

ax.scatter(omega_y, omega_z, omega_x_cmd, marker='o')
ax.scatter(omega_y, omega_z, np.dot(A, x), marker='^')

ax.zaxis.set_major_formatter('{x:.02f}')

ax.set_xlabel('angular y vel [rad/s]')
ax.set_ylabel('angular z vel [rad/s]')
ax.set_zlabel('x command offset [rad/s]')

# fit function: omega_y_cmd = f(omega_y, omega_z)
A = np.column_stack([a * b for a in [np.abs(omega_z), omega_z**2] for b in [1 / omega_y**4, 1 / np.abs(omega_y)]])
b = (omega_y_cmd - omega_y) / omega_y

x = np.linalg.solve(np.dot(A.T, A), np.dot(A.T, b))
print(x)

fig, ax = plt.subplots(subplot_kw={"projection": "3d"})

ax.scatter(omega_y, omega_z, omega_y_cmd, marker='o')
ax.scatter(omega_y, omega_z, (np.dot(A, x) * omega_y + omega_y), marker='^')

ax.zaxis.set_major_formatter('{x:.02f}')

ax.set_xlabel('angular y vel [rad/s]')
ax.set_ylabel('angular z vel [rad/s]')
ax.set_zlabel('x command offset [rad/s]')

# fit omega_z = f(omega_y) at omega_x_command_offset = 0.45
sub_data = data[8::9, 1:3]

omega_y_cmd = data[:, 0]
omega_y = data[:, 1]
omega_z = data[:, 2]
omega_x_cmd = data[:, 3]

# fit function: omega_x_cmd = f(omega_y, omega_z)
A = np.abs(sub_data[:, 0])
b = np.abs(sub_data[:, 1] / sub_data[:, 0])

x = 1 / np.dot(A.T, A) * np.dot(A.T, b)
print(x)

plt.figure()
plt.plot(np.abs(sub_data[:, 0]), np.abs(sub_data[:, 1] / sub_data[:, 0]), 'b*')
plt.plot(np.abs(sub_data[:, 0]), A * x, 'r-')


plt.show(block=True)
